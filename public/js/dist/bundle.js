var temColumn=function(e){var t={};function s(i){if(t[i])return t[i].exports;var h=t[i]={i:i,l:!1,exports:{}};return e[i].call(h.exports,h,h.exports,s),h.l=!0,h.exports}return s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},s.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}([function(e,t,s){"use strict";s.r(t);class i{constructor(e,t,s,i){this.scene=s,this.labelGeom=new THREE.CubeGeometry(t,t/2,t,1,1,1),this.labelMaterial=new THREE.MeshBasicMaterial({color:16760832,wireframe:!0}),this.label1=new THREE.Mesh(this.labelGeom,this.labelMaterial),this.label1.position.y=-i,this.label1.position.x=e,this.label2=new THREE.Mesh(this.labelGeom,this.labelMaterial),this.label2.position.y=-i,this.label2.position.x=-e}draw(){this.scene.add(this.label1),this.scene.add(this.label2)}clear(){this.scene.remove(this.label1),this.scene.remove(this.label2)}}class h{constructor(e,t,s,i,h){this.startY=e,this.radius=t,this.scene=s,this.title=i,this.endY=h,this.labels=new Array}addLabel(e,t){let s=Number(this.endY-this.startY),h=(s*=t)+this.startY;this.labels.push(new i(1.5*this.radius,.25*e,this.scene,h)),this.labels[this.labels.length-1].draw()}getStartY(){return this.startY}getMiddle(){return(this.startY+this.endY)/2}getTitle(){return this.title}getEndY(){throw new Error("Must implement get end method, ColumnComponent is an abstract base class")}draw(){}clear(){}}class r extends h{constructor(e,t,s,i,h,r,a,n){super(0,e,t,s,0),this.heightPercent=i,this.widthPercent=h,this.lensStart=a,this.lensHeight=r,this.lensRadius=e,this.focalLength=n,this.apertureDepth=1.3*e,this.baseLensRadius=this.lensRadius,this.baseApertureWidth=1.75*this.radius,this.startY=this.focalLength*this.heightPercent+this.lensStart+this.lensHeight,this.endY=this.startY+.5,this.lensRadius=this.baseLensRadius*(1-this.heightPercent)*this.widthPercent}draw(){this.drawAperture()}drawAperture(){let e=new THREE.MeshBasicMaterial({color:5592524}),t=this.baseApertureWidth,s=new THREE.CubeGeometry(t,.1,this.apertureDepth,1,1,1);this.aperture1=new THREE.Mesh(s,e),this.aperture1.position.y=-this.startY,this.aperture1.position.x=1.05*-this.lensRadius-.5*this.baseApertureWidth,this.scene.add(this.aperture1),this.aperture2=new THREE.Mesh(s,e),this.aperture2.position.y=-this.startY,this.aperture2.position.x=1.05*this.lensRadius+.5*this.baseApertureWidth,this.scene.add(this.aperture2)}clear(){this.scene.remove(this.aperture1),this.aperture1=null,this.scene.remove(this.aperture2),this.aperture2=null}updateWidth(e){if(this.clear(),this.widthPercent=e,this.lensRadius=this.baseLensRadius*(1-this.heightPercent)*this.widthPercent,0===e)return!0}getWidth(){return this.widthPercent}}class a extends h{constructor(e,t,s,i,h,r,a){super(t,s,r,a),this.focalLength=e,this.depth=.6*s,this.centerPoint=i,this.lensHeight=h,this.endY=this.startY+this.focalLength+this.lensHeight,this.baseRadius=s,this.apertures=[],this.faceMat=new THREE.MeshPhongMaterial({color:16738740,wireframe:!1}),this.frameMat=new THREE.MeshPhongMaterial({color:16032200,wireframe:!0}),this.lensMat=new THREE.MeshBasicMaterial({color:16776960,transparent:!0,opacity:.7,wireframe:!1}),this.drawLens()}drawLens(){this.lensShape=new THREE.SphereGeometry(2,16,12),this.lensShape.applyMatrix((new THREE.Matrix4).makeScale(3,.1,1.25)),this.lensMesh=new THREE.Mesh(this.lensShape,this.lensMat),this.lensMesh.position.y=-this.lensHeight-this.startY,this.scene.add(this.lensMesh)}drawRays(){let e=new THREE.Geometry;return e.vertices.push(new THREE.Vector3(0,-this.startY,0)),e.vertices.push(new THREE.Vector3(0,-this.lensHeight-this.startY,this.depth,0)),e.vertices.push(new THREE.Vector3(-this.radius,-this.lensHeight-this.startY,0)),e.vertices.push(new THREE.Vector3(this.radius,-this.lensHeight-this.startY,0)),e.vertices.push(new THREE.Vector3(0,-this.lensHeight-this.startY,-this.depth)),e.vertices.push(new THREE.Vector3(0,-this.lensHeight-this.startY-this.focalLength,0)),e.faces.push(new THREE.Face3(0,2,1)),e.faces.push(new THREE.Face3(0,1,3)),e.faces.push(new THREE.Face3(0,4,2)),e.faces.push(new THREE.Face3(0,3,4)),e.faces.push(new THREE.Face3(5,2,4)),e.faces.push(new THREE.Face3(5,1,2)),e.faces.push(new THREE.Face3(5,3,1)),e.faces.push(new THREE.Face3(5,4,3)),e.computeFaceNormals(),e.computeVertexNormals(),this.ray=new THREE.Mesh(e,this.faceMat),this.wire=new THREE.Mesh(e,this.frameMat),this.scene.add(this.ray),this.scene.add(this.wire),!1}drawRaysWithApertures(){let e=new THREE.Geometry,t=(this.apertures[0].startY-this.startY-this.lensHeight)/this.baseRadius,s=(this.apertures[0].startY-this.startY)*t;return e.vertices.push(new THREE.Vector3(0,-this.startY,0)),e.vertices.push(new THREE.Vector3(0,-this.lensHeight-this.startY,this.depth)),e.vertices.push(new THREE.Vector3(-this.baseRadius,-this.lensHeight-this.startY,0)),e.vertices.push(new THREE.Vector3(this.baseRadius,-this.lensHeight-this.startY,0)),e.vertices.push(new THREE.Vector3(0,-this.lensHeight-this.startY,-this.depth)),e.vertices.push(new THREE.Vector3(-this.radius,-this.apertures[0].startY,this.depth/2)),e.vertices.push(new THREE.Vector3(this.radius,-this.apertures[0].startY,this.depth/2)),e.vertices.push(new THREE.Vector3(0,-this.lensHeight-this.startY-this.focalLength,0)),e.vertices.push(new THREE.Vector3(-s,-this.apertures[0].startY,this.depth/2)),e.vertices.push(new THREE.Vector3(s,-this.apertures[0].startY,0)),e.vertices.push(new THREE.Vector3(0,-this.apertures[0].startY,this.depth)),e.faces.push(new THREE.Face3(0,2,1)),e.faces.push(new THREE.Face3(0,1,3)),e.faces.push(new THREE.Face3(0,4,2)),e.faces.push(new THREE.Face3(0,3,4)),e.faces.push(new THREE.Face3(5,1,2)),e.faces.push(new THREE.Face3(5,1,8)),e.faces.push(new THREE.Face3(8,1,2)),e.faces.push(new THREE.Face3(6,1,9)),e.faces.push(new THREE.Face3(6,3,1)),e.faces.push(new THREE.Face3(3,1,9)),e.faces.push(new THREE.Face3(3,6,9)),0!==this.radius&&(e.faces.push(new THREE.Face3(6,1,10)),e.faces.push(new THREE.Face3(1,5,10)),e.faces.push(new THREE.Face3(7,10,5)),e.faces.push(new THREE.Face3(7,5,6)),e.faces.push(new THREE.Face3(6,10,7))),e.computeFaceNormals(),e.computeVertexNormals(),this.ray=new THREE.Mesh(e,this.faceMat),this.wire=new THREE.Mesh(e,this.frameMat),this.scene.add(this.ray),this.scene.add(this.wire),0===this.radius}addAperture(e,t,s){this.apertures.push(new r(this.radius,this.scene,s,e,t,this.lensHeight,this.startY,this.focalLength)),this.radiusAtHeight=this.baseRadius*(1-e),this.radius=this.radiusAtHeight*t}updateAperture(e){this.apertures[0].updateWidth(e),this.radius=this.radiusAtHeight*e,this.clear()}getApertureWidth(){return this.apertures[0].getWidth()}draw(){if(super.draw(),this.apertures[0]){for(let e in this.apertures)this.apertures[e].draw();return this.drawRaysWithApertures()}return this.drawRays()}getEndY(){return this.startY+this.lensHeight+this.focalLength}updateStartY(e){this.clear();let t=this.startY-e;this.startY=e,this.lensHeight+=t,this.draw()}clear(){super.clear(),this.scene.remove(this.ray),this.scene.remove(this.wire),void 0!==this.apertures[0]&&this.apertures[0].clear(),this.ray=null}updateFocalLength(e){this.clear(),this.focalLength=Number(e),this.rayShape=null,this.draw()}}class n extends a{constructor(e,t,s,i,h,r,a,n,c){super(e,t,s,i,h,n,c),this.scene=n,this.x1=r,this.x2=a}drawRays(){let e=new THREE.Geometry,t=(Number(this.x1)+Number(this.x2))/2;e.vertices.push(new THREE.Vector3(0,-this.startY,0)),e.vertices.push(new THREE.Vector3(t,-this.lensHeight-this.startY,this.depth)),e.vertices.push(new THREE.Vector3(this.x1,-this.lensHeight-this.startY,0)),e.vertices.push(new THREE.Vector3(this.x2,-this.lensHeight-this.startY,0)),e.vertices.push(new THREE.Vector3(t,-this.lensHeight-this.startY,-this.depth)),e.vertices.push(new THREE.Vector3(0,-this.lensHeight-this.startY-this.focalLength,0)),e.faces.push(new THREE.Face3(1,0,2)),e.faces.push(new THREE.Face3(0,1,3)),e.faces.push(new THREE.Face3(2,0,4)),e.faces.push(new THREE.Face3(4,0,3)),e.faces.push(new THREE.Face3(4,3,5)),e.faces.push(new THREE.Face3(4,5,2)),e.faces.push(new THREE.Face3(5,1,2)),e.faces.push(new THREE.Face3(5,3,1)),e.computeFaceNormals(),e.computeVertexNormals();let s=new THREE.Geometry;s.vertices.push(new THREE.Vector3(0,-this.startY,0)),s.vertices.push(new THREE.Vector3(-t,-this.lensHeight-this.startY,this.depth)),s.vertices.push(new THREE.Vector3(-this.x1,-this.lensHeight-this.startY,0)),s.vertices.push(new THREE.Vector3(-this.x2,-this.lensHeight-this.startY,0)),s.vertices.push(new THREE.Vector3(-t,-this.lensHeight-this.startY,-this.depth)),s.vertices.push(new THREE.Vector3(0,-this.lensHeight-this.startY-this.focalLength,0)),s.faces.push(new THREE.Face3(0,1,2)),s.faces.push(new THREE.Face3(1,0,3)),s.faces.push(new THREE.Face3(0,2,4)),s.faces.push(new THREE.Face3(0,4,3)),s.faces.push(new THREE.Face3(3,4,5)),s.faces.push(new THREE.Face3(5,4,2)),s.faces.push(new THREE.Face3(1,5,2)),s.faces.push(new THREE.Face3(3,5,1)),s.computeFaceNormals(),s.computeVertexNormals(),this.ray=new THREE.Mesh(e,this.faceMat),this.ray2=new THREE.Mesh(s,this.faceMat),this.wire1=new THREE.Mesh(e,this.frameMat),this.wire2=new THREE.Mesh(s,this.frameMat),this.scene.add(this.ray),this.scene.add(this.ray2),this.scene.add(this.wire1),this.scene.add(this.wire2)}updatex1(e){this.clearScene(),this.x1=e,this.rayShape1=null,this.drawRays()}updatex2(e){this.clearScene(),this.x2=e,this.rayShape1=null,this.drawRays()}updateFocalLength(e){this.clearScene(),super.updateFocalLength(e)}clear(){super.clear(),this.scene.remove(this.ray),this.ray=null,this.scene.remove(this.ray2),this.ray2=null,this.scene.remove(this.ray2),this.ray2=null,this.scene.remove(this.wire1),this.wire1=null,this.scene.remove(this.wire2),this.wire2=null}updateStartY(e){this.clearScene();let t=this.startY-e;this.startY=e,this.lensHeight+=t,this.draw()}getEndY(){return this.startY+this.lensHeight+this.focalLength}}class c extends a{constructor(e,t,s,i,h,r,a){super(e,t,i,0,s,h,r),this.radiusBottom=a,this.endY=this.startY+this.focalLength+this.lensHeight,this.height=this.endY-this.startY}drawRays(){let e=new THREE.Geometry;e.vertices.push(new THREE.Vector3(0,-this.startY,0)),e.vertices.push(new THREE.Vector3(0,-this.lensHeight-this.startY,this.radius)),e.vertices.push(new THREE.Vector3(-this.radius,-this.lensHeight-this.startY,0)),e.vertices.push(new THREE.Vector3(this.radius,-this.lensHeight-this.startY,0)),e.vertices.push(new THREE.Vector3(0,-this.lensHeight-this.startY,-this.radius)),e.faces.push(new THREE.Face3(0,2,1)),e.faces.push(new THREE.Face3(0,1,3)),e.faces.push(new THREE.Face3(0,4,2)),e.faces.push(new THREE.Face3(0,3,4)),e.computeFaceNormals(),e.computeVertexNormals(),this.topRay=new THREE.Mesh(e,this.faceMat);let t=new THREE.CylinderGeometry(this.radius,this.radiusBottom,this.height,8,1);this.rayMesh=new THREE.Mesh(t,this.faceMat),this.wireMesh=new THREE.Mesh(t,this.frameMat),this.topWireMesh=new THREE.Mesh(e,this.frameMat),this.rayMesh.position.y=-this.startY-this.lensHeight-this.height/2,this.wireMesh.position.y=this.rayMesh.position.y,this.scene.add(this.rayMesh),this.scene.add(this.wireMesh),this.scene.add(this.topWireMesh),this.scene.add(this.topRay)}draw(){super.draw()}clear(){super.clear(),this.scene.remove(this.rayMesh),this.scene.remove(this.wireMesh),this.scene.remove(this.topWireMesh),this.scene.remove(this.topRay),this.scene.remove(this.lensMesh)}updateBotRadius(e){this.radiusBottom=this.radius*e,this.clear(),this.draw()}getEndY(){return this.lensHeight+this.height+this.startY}}class o extends h{constructor(e,t,s,i){super(i,e,t,s,i+1.5),this.half=.75,this.height=1.5,this.depth=.6*this.radius,this.ExtractorBeamMaterial=new THREE.MeshPhongMaterial({color:16711680,side:THREE.FrontSide}),this.beamMaterial=new THREE.MeshPhongMaterial({color:16738740})}drawExtractorBeam(){let e=new THREE.Geometry;e.vertices.push(new THREE.Vector3(0,-this.startY,0)),e.vertices.push(new THREE.Vector3(-this.radius,-this.startY-this.half,0)),e.vertices.push(new THREE.Vector3(0,-this.startY-this.half,this.depth)),e.vertices.push(new THREE.Vector3(this.radius,-this.startY-this.half,0)),e.vertices.push(new THREE.Vector3(0,-this.startY-this.half,-this.depth)),e.vertices.push(new THREE.Vector3(0,-this.endY,0)),e.faces.push(new THREE.Face3(0,1,2)),e.faces.push(new THREE.Face3(0,2,3)),e.faces.push(new THREE.Face3(0,4,1)),e.faces.push(new THREE.Face3(0,3,4)),e.faces.push(new THREE.Face3(2,1,5)),e.faces.push(new THREE.Face3(2,5,3)),e.faces.push(new THREE.Face3(3,5,4)),e.faces.push(new THREE.Face3(5,1,4)),e.computeFaceNormals(),e.computeVertexNormals(),this.ExtractorBeam=new THREE.Mesh(e,this.ExtractorBeamMaterial),this.scene.add(this.ExtractorBeam)}getStartY(){return this.startY-this.height}getEndY(){return this.endY}draw(){super.draw(),this.drawExtractorBeam()}}class E extends h{constructor(e,t,s,i,h){super(e,t,s,i,h)}drawGun(){this.gunGeo=new THREE.CylinderGeometry(2*this.radius,2*this.radius,this.endY-this.startY,8,1),this.gunMat=new THREE.MeshPhongMaterial({color:11184810}),this.gunMesh=new THREE.Mesh(this.gunGeo,this.gunMat),this.gunMesh.position.y=this.startY,this.scene.add(this.gunMesh)}getEndY(){return this.endY}draw(){super.draw(),this.drawGun()}}class p extends a{constructor(e,t,s,i,h,r,a,n,c){super(e,t,s,i,h,r,a),this.innerLeft=n,this.innerRight=c,this.topLeft=-this.radius/.5,this.topRight=this.radius/.5}getBottomX(){return this.innerRight}drawRays(){let e=new THREE.Geometry;e.vertices.push(new THREE.Vector3(-this.radius/2,-this.startY,0)),e.vertices.push(new THREE.Vector3(this.radius/2,-this.startY,0)),e.vertices.push(new THREE.Vector3(0,-this.startY,this.radius)),e.vertices.push(new THREE.Vector3(this.innerLeft-this.radius,-this.startY-this.lensHeight,0)),e.vertices.push(new THREE.Vector3(this.innerLeft,-this.startY-this.lensHeight,0)),e.vertices.push(new THREE.Vector3(this.innerLeft-this.radius/2,-this.startY-this.lensHeight,this.radius/2)),e.vertices.push(new THREE.Vector3(this.innerRight,-this.startY-this.lensHeight,0)),e.vertices.push(new THREE.Vector3(this.innerRight+this.radius,-this.startY-this.lensHeight,0)),e.vertices.push(new THREE.Vector3(this.innerRight+this.radius/2,-this.startY-this.lensHeight,this.radius/2)),e.vertices.push(new THREE.Vector3(this.innerLeft,-this.startY-this.lensHeight-this.focalLength,0)),e.vertices.push(new THREE.Vector3(this.innerRight,-this.startY-this.lensHeight-this.focalLength,0)),e.vertices.push(new THREE.Vector3(-this.radius/2,-this.startY-this.lensHeight,0)),e.vertices.push(new THREE.Vector3(0,-this.startY-this.lensHeight,this.radius/2)),e.vertices.push(new THREE.Vector3(this.radius/2,-this.startY-this.lensHeight,0)),e.vertices.push(new THREE.Vector3(0,-this.startY-this.lensHeight-this.focalLength,0)),e.faces.push(new THREE.Face3(0,5,2)),e.faces.push(new THREE.Face3(0,3,5)),e.faces.push(new THREE.Face3(0,1,3)),e.faces.push(new THREE.Face3(4,3,1)),e.faces.push(new THREE.Face3(1,2,5)),e.faces.push(new THREE.Face3(1,5,4)),e.faces.push(new THREE.Face3(3,9,5)),e.faces.push(new THREE.Face3(3,4,9)),e.faces.push(new THREE.Face3(4,5,9)),e.faces.push(new THREE.Face3(0,6,2)),e.faces.push(new THREE.Face3(0,7,6)),e.faces.push(new THREE.Face3(0,1,7)),e.faces.push(new THREE.Face3(2,6,8)),e.faces.push(new THREE.Face3(1,2,8)),e.faces.push(new THREE.Face3(1,8,7)),e.faces.push(new THREE.Face3(8,6,10)),e.faces.push(new THREE.Face3(7,8,10)),e.faces.push(new THREE.Face3(6,7,10)),e.faces.push(new THREE.Face3(0,13,11)),e.faces.push(new THREE.Face3(1,13,0)),e.faces.push(new THREE.Face3(2,0,11)),e.faces.push(new THREE.Face3(2,11,12)),e.faces.push(new THREE.Face3(2,12,1)),e.faces.push(new THREE.Face3(12,13,1)),e.faces.push(new THREE.Face3(12,11,14)),e.faces.push(new THREE.Face3(13,12,14)),e.faces.push(new THREE.Face3(11,13,14)),e.computeFaceNormals(),e.computeVertexNormals(),this.ray=new THREE.Mesh(e,this.faceMat),this.wire=new THREE.Mesh(e,this.frameMat),this.scene.add(this.ray),this.scene.add(this.wire)}getEndY(){return this.startY+this.lensHeight+this.focalLength}}class d extends a{constructor(e,t,s,i,h,r,a,n,c){super(e,t,s,i,h,r,a),this.delta=n,this.leftX=-s-n,this.rightX=s+n,this.x1=-c,this.x2=c}getEndY(){return this.startY+this.lensHeight+this.focalLength}drawRays(){let e=new THREE.Geometry;e.vertices.push(new THREE.Vector3(this.x1,-this.startY,0)),e.vertices.push(new THREE.Vector3(this.x1,-this.startY-this.lensHeight,0)),e.vertices.push(new THREE.Vector3(0,-this.startY-this.lensHeight,this.depth)),e.vertices.push(new THREE.Vector3(this.radius+this.delta,-this.startY-this.lensHeight,0)),e.vertices.push(new THREE.Vector3(this.x2,-this.startY,0)),e.vertices.push(new THREE.Vector3(-this.radius-this.delta,-this.startY-this.lensHeight,0)),e.vertices.push(new THREE.Vector3(this.x2,-this.startY-this.lensHeight,0)),e.vertices.push(new THREE.Vector3(0,-this.startY,0)),e.vertices.push(new THREE.Vector3(-this.radius-this.delta/2,-this.startY-this.lensHeight,0)),e.vertices.push(new THREE.Vector3(this.radius+this.delta/2,-this.startY-this.lensHeight,0)),e.faces.push(new THREE.Face3(0,1,2)),e.faces.push(new THREE.Face3(0,2,3)),e.faces.push(new THREE.Face3(2,4,5)),e.faces.push(new THREE.Face3(4,2,6)),e.faces.push(new THREE.Face3(2,7,8)),e.faces.push(new THREE.Face3(7,2,9)),e.faces.push(new THREE.Face3(1,0,3)),e.faces.push(new THREE.Face3(4,6,5)),e.faces.push(new THREE.Face3(9,8,7)),e.faces.push(new THREE.Face3(5,3,2)),e.computeFaceNormals(),e.computeVertexNormals(),this.ray=new THREE.Mesh(e,this.faceMat),this.wire=new THREE.Mesh(e,this.frameMat),this.scene.add(this.ray),this.scene.add(this.wire);let t=new THREE.Geometry;t.vertices.push(new THREE.Vector3(this.leftX,-this.startY-this.lensHeight,0)),t.vertices.push(new THREE.Vector3(this.x1,-this.startY-this.lensHeight,0)),t.vertices.push(new THREE.Vector3(this.x2,-this.startY-this.lensHeight,0)),t.vertices.push(new THREE.Vector3(this.rightX,-this.startY-this.lensHeight,0)),t.vertices.push(new THREE.Vector3(0,-this.startY-this.lensHeight-this.focalLength,0)),t.vertices.push(new THREE.Vector3(this.x1,-this.startY-this.lensHeight,this.depth/4)),t.vertices.push(new THREE.Vector3(this.x2,-this.startY-this.lensHeight,this.depth/4)),t.faces.push(new THREE.Face3(0,1,4)),t.faces.push(new THREE.Face3(5,0,4)),t.faces.push(new THREE.Face3(4,1,5)),t.faces.push(new THREE.Face3(2,3,4)),t.faces.push(new THREE.Face3(3,6,4)),t.faces.push(new THREE.Face3(4,6,2)),t.computeFaceNormals(),t.computeVertexNormals(),this.bottomRay=new THREE.Mesh(t,this.faceMat),this.bottomWire=new THREE.Mesh(t,this.frameMat),this.scene.add(this.bottomRay),this.scene.add(this.bottomWire)}clear(){this.scene.remove(this.bottomRay),this.scene.remove(this.bottomWire),this.scene.remove(this.ray),this.scene.remove(this.wire)}}class u extends h{constructor(e,t,s,i,h){super(e,s,i,h),this.focalLength=t,this.rayGeo=new THREE.ConeGeometry(this.radius,this.focalLength,16,1),this.faceMat=new THREE.MeshPhongMaterial({color:16738740,wireframe:!1}),this.frameMat=new THREE.MeshPhongMaterial({color:16032200,wireframe:!0}),this.rayGeo.applyMatrix((new THREE.Matrix4).makeScale(1.5,1,.5))}drawRays(){this.rayMesh=new THREE.Mesh(this.rayGeo,this.faceMat),this.rayMesh.position.y=-this.startY-this.focalLength/2,this.scene.add(this.rayMesh)}drawScreen(){this.ringGeo=new THREE.CylinderGeometry(2*this.radius,2*this.radius,.25,16,1,!0),this.ringMat=new THREE.MeshBasicMaterial({color:0,side:THREE.DoubleSide}),this.ringMesh=new THREE.Mesh(this.ringGeo,this.ringMat),this.ringMesh.position.y=-this.startY-this.focalLength,this.innerringGeo=new THREE.CylinderGeometry(this.radius/2,this.radius/2,.25,16,1,!0),this.innerringMat=new THREE.MeshBasicMaterial({color:0,side:THREE.DoubleSide}),this.innerringMesh=new THREE.Mesh(this.innerringGeo,this.innerringMat),this.innerringMesh.position.y=-this.startY-this.focalLength+.05,this.screenGeo=new THREE.CylinderGeometry(2*this.radius-.01,2*this.radius-.01,.25,16),this.screenMat=new THREE.MeshBasicMaterial({color:16777215,side:THREE.DoubleSide}),this.screenMesh=new THREE.Mesh(this.screenGeo,this.screenMat),this.screenMesh.position.y=-this.startY-this.focalLength,this.scene.add(this.ringMesh),this.scene.add(this.screenMesh),this.scene.add(this.innerringMesh)}draw(){this.drawRays(),this.drawScreen()}clear(){super.clear(),this.scene.remove(this.rayMesh)}}class l extends h{constructor(e,t,s,i){super(e,t,s,i)}drawScreen(){let e=new THREE.BoxGeometry(4*this.radius,.25,2*this.radius),t=new THREE.MeshPhongMaterial({color:16026690}),s=new THREE.MeshPhongMaterial({color:0,wireframe:!0});this.specimen=new THREE.Mesh(e,t),this.frameMesh=new THREE.Mesh(e,s),this.specimen.position.y=-this.startY-.15,this.specimen.position.x=-1,this.frameMesh.position.y=this.specimen.position.y,this.frameMesh.position.x=this.specimen.position.x,this.scene.add(this.specimen),this.scene.add(this.frameMesh)}getMiddle(){return this.startY-.25}getEndY(){return this.startY+.25}draw(){super.draw(),this.drawScreen()}clear(){super.clear()}}class w{constructor(e,t){this.components=new Array,this.height=e,this.cMaterial=new THREE.CylinderGeometry(10,10,this.height,20,1,!0,1.5,3),this.cGeometry=new THREE.MeshPhongMaterial({side:THREE.FrontSide,shadowSide:THREE.BackSide,wireframe:!1,color:16777215}),this.scene=t,this.open=!1,this.radius=2.5,this.lineMaterial=new THREE.LineBasicMaterial({color:16711680,side:THREE.DoubleSide}),this.lineGeometry=new THREE.Geometry,this.cMaterial.computeFaceNormals(),this.cMaterial.computeVertexNormals(),this.cMesh=new THREE.Mesh(this.cMaterial,this.cGeometry),this.cMesh.position.y=this.height/2,this.init=this.init.bind(this)}addSimpleLens(e,t,s){let i=new a(e,this.getStartY(),this.radius,0,t,this.scene,s);this.components.push(i)}addAngledLens(e,t,s,i,h){let r=new n(e,this.getStartY(),this.radius,0,t,s,i,this.scene,h);this.components.push(r)}addCylinderLens(e,t,s,i){let h=this.radius*i,r=new c(e,this.getStartY(),t,this.radius,this.scene,s,h);this.components.push(r)}addLowerObjectiveLens(e,t,s){let i=new p(e,this.getStartY(),this.radius,0,t,this.scene,s,-2,2);this.components.push(i)}addOverhangLens(e,t,s,i){if(!(this.components[this.components.length-1]instanceof p))throw new Error("Can't place overhang lens after anything but lower objective lens");{let h=this.components[this.components.length-1].getBottomX(),r=new d(e,this.getStartY(),this.radius,0,t,this.scene,i,s,h);this.components.push(r)}}addSpecimen(e){let t=this.getStartY(),s=new l(t,this.radius,this.scene,e);this.components.push(s)}addScreen(e,t){let s=this.getStartY(),i=new u(s,e,this.radius,this.scene,t);this.components.push(i)}getStartY(){return 0!=this.components.length?this.components[this.components.length-1].getEndY():0}addExtractorBeam(e){let t=this.getStartY(),s=new o(this.radius/4,this.scene,e,t);this.components.push(s)}addGun(e){let t=new E(-.2,.5,this.scene,e,.4);this.components.push(t)}addAperture(e,t,s,i){if(!this.components[e])throw new Error("The component you're trying to add a apperture for doesn't exist");this.components[e].addAperture(t,s,i)}addLabel(e,t,s){if(!this.components[e])throw new Error("The component you're trying to add a label for doesn't exist");this.components[e].addLabel(t,s)}draw(){var e=!1;for(let t=0;t<this.components.length;++t)e||void 0===(e=this.components[t].draw())&&(e=!1)}clear(){for(let e=0;e<this.components.length;++e)this.components[e].clear()}focusColumn(e){return this.components[e].getMiddle()+2}getTitle(e){return this.components[e].getTitle()}init(){}updateFocalLength(e,t){this.components[e].updateFocalLength(t),this.components[e+1]&&this.components[e+1].updateStartY(this.components[e].getEndY())}updateAperture(e,t){this.components[e].updateAperture(t),this.clear(),this.draw()}updateLeftBoundry(e,t){this.components[e].updatex1(t)}updateRightBoundry(e,t){this.components[e].updatex2(t)}updateBotRadius(e,t){this.components[e].updateBotRadius(t)}toggleValve(){this.open?this.updateAperture(2,1):this.updateAperture(2,0),this.open=!this.open}}s.d(t,"MicroscopeColumn",function(){return H});class H{constructor(e){if(null===document.getElementById(e))throw new Error("ERROR: Couldn't find the provided div "+e);this.window=$("#"+e),this.scene=new THREE.Scene,this.camera=new THREE.PerspectiveCamera(15,1,.1,1500),this.controls,this.renderer,this.columnHeight=-45,this.animate=this.animate.bind(this),this.init=this.init.bind(this),this.render=this.render.bind(this),this.sceneHeight=this.window.height()-35,this.open=!0,this.delta=-.2,this.init(),this.animate(),this.drawScene(),this.toggleValve()}init(){this.initTitle(),this.renderer=new THREE.WebGLRenderer({alpha:!0,antialias:!1}),this.renderer.setSize(this.window.width(),this.sceneHeight),this.renderer.domElement.id="threeCanvas",this.window.append(this.renderer.domElement),this.controls=new THREE.TrackballControls(this.camera,document.getElementById("threeCanvas")),this.camera.position.z=130,this.camera.position.y=-15,this.camera.position.x=0,this.controls.target=new THREE.Vector3(0,-15,0),this.initLights(),this.initColumn(),this.initBackground(),this.controls.addEventListener("change",this.render)}initTitle(){this.titleSpace=$("<div>w</div>"),this.titleSpace.css("background","#00cbcc"),this.titleSpace.css("color","#00cbcc"),this.titleSpace.css("font-size","0.5em"),this.title=$("<div>Overall Column</div>"),this.title.css("padding-top","0.25em"),this.title.css("padding-left","1em"),this.title.css("padding-bottom","0.25em"),this.title.css("background","#18ffff"),this.title.css("font-family","Roboto,Noto,sans-serif"),this.title.css("box-shadow","30px, 30px, 3px, white"),this.window.append(this.titleSpace),this.window.append(this.title)}initLights(){this.keyLight=new THREE.SpotLight(new THREE.Color(0,100,0),5,20),this.keyLight.position.set(0,-.1,18),this.keyLight.target.position.set=0,this.keyLight.angle=.2,this.keyLight.penumbra=1,this.keyLight.decay=2,this.keyLight.scale.x=4,this.keyLight.scale.z=5,this.pointLight=new THREE.PointLight("#ffd7b8",.5),this.pointLight.position.y=-10,this.pointLight.position.z=10;let e=new THREE.DirectionalLight(new THREE.Color("hsl(285, 100%, 100%)"),1);e.position.set(-5,-20,10).normalize(),e.target.position.set(0,0,0),new THREE.DirectionalLight(new THREE.Color("hsl(58, 100%, 100%)"),1).position.set(0,0,50),new THREE.DirectionalLight(new THREE.Color("hsl(338, 100%, 100%)"),1).position.set(0,10,0).normalize(),this.scene.add(this.keyLight),this.scene.add(this.keyLight.target),this.scene.add(this.pointLight)}initPositionChecker(){let e=new THREE.SphereGeometry(.1,10,10),t=new THREE.MeshBasicMaterial({color:16711680});this.sphereMesh=new THREE.Mesh(e,t),this.sphereMesh.position.y=-6.45,this.sphereMesh.position.z=0,this.sphereMesh.position.x=1.25,this.scene.add(this.sphereMesh)}initBackground(){let e,t=new THREE.LoadingManager,s=new THREE.TextureLoader(t);this.open?s.load("./public/img/columnbackgroundopen.png",function(t){e=t}):s.load("./public/img/columnbackgroundclosed.png",function(t){e=t}),t.onLoad=function(){this.scene.background=e,this.render()},t.onLoad=t.onLoad.bind(this)}initColumn(){this.microscope=new w(this.columnHeight,this.scene),this.createLenses()}render(){this.renderer.render(this.scene,this.camera)}drawScene(){this.microscope.init(),this.render()}animate(){requestAnimationFrame(this.animate),this.controls.update(),this.moveLight()}moveLight(){this.keyLight.position.y<-35&&(this.keyLight.position.y=4),this.scene.remove(this.keyLight),this.scene.remove(this.keyLight.target);let e=this.keyLight.position.x,t=this.keyLight.position.y=this.keyLight.position.y+this.delta,s=this.keyLight.position.z;this.keyLight.position.set(e,t,s),this.keyLight.target.position.y=t-2,this.scene.add(this.keyLight),this.scene.add(this.keyLight.target),this.render()}createLenses(){this.microscope.addGun("Electron Gun"),this.microscope.addExtractorBeam("Electron Extractor"),this.microscope.addLabel(1,1,.2),this.microscope.addLabel(1,1,.4),this.microscope.addSimpleLens(1.2,4,"Condensor Lens 1"),this.microscope.addAperture(2,.5,1,"Condensor 1 Aperture"),this.microscope.addLabel(2,2,.15),this.microscope.addLabel(2,2,.3),this.microscope.addSimpleLens(1.2,2,"Condensor Lens 2"),this.microscope.addAperture(3,.01,1,"Condesor 2 Aperture"),this.microscope.addLabel(3,2,.9),this.microscope.addSimpleLens(.5,2,"Minicondensor Lens"),this.microscope.addLabel(4,2,.1),this.microscope.addLabel(4,2,.3),this.microscope.addCylinderLens(1,1,"EDX Detector",1),this.microscope.addSpecimen("Specimen"),this.microscope.addLowerObjectiveLens(1,1,"Lower Objective Lens"),this.microscope.addOverhangLens(2,2,.75,"Diffraction Lens"),this.microscope.addLabel(8,2,.1),this.microscope.addLabel(8,2,.2),this.microscope.addLabel(8,2,.3),this.microscope.addLabel(8,2,.4),this.microscope.addAngledLens(.5,.5,-2,-1,"Fifth Lens"),this.microscope.addAngledLens(.5,.5,-2,-1,"Fifth Lens"),this.microscope.addAngledLens(3,1,-2,-1,"Fifth Lens"),this.microscope.addScreen(2,"Screen"),this.microscope.draw()}updateFocalLength(e,t){this.microscope.updateFocalLength(e,t),this.render()}updateLeftBoundry(e,t){this.microscope.updateLeftBoundry(e,t),this.render()}updateRightBoundry(e,t){this.microscope.updateRightBoundry(e,t),this.render()}updateBotRadius(e,t){this.microscope.updateBotRadius(e,t),this.render()}updateAperture(e,t){this.microscope.updateAperture(e,t),this.render()}focusColumn(e){let t;if(-1==e)this.camera.position.z=130,this.camera.position.y=-15,this.camera.position.x=0,this.controls.target=new THREE.Vector3(0,-15,0),t="Overall Column";else{let s=-this.microscope.focusColumn(e);t=this.microscope.getTitle(e),this.camera.position.z=40,this.camera.position.x=0,this.camera.position.y=s,this.controls.target.y=s,this.controls.target.x=0}this.title.text(t),this.render()}toggleValve(){this.open=!this.open,this.initBackground(),this.microscope.toggleValve()}}}]);